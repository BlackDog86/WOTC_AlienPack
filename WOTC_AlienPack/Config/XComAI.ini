;;;;;;;;;;; BEHAVIOR TREE MODIFICATIONS ;;;;;;;;;;;;;;;;;;
[WOTC_AlienPack.UIScreenListener_Shell_LWAlienPack]
; "ScamperRoot_Naja" - naja scamper uses snipermove
+NewBehaviors=(BehaviorName=ScamperRoot_Naja, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=SniperDefense, Child[2]=SniperMove, Child[3]=MoveStandardWithLoSUnsafe, Child[4]=MoveStandardUnsafe, Child[5]=MoveStandardWithLoSUnsafeIgnoreHazards, Child[6]=MoveStandardUnsafeIgnoreHazards, Child[7]=SkipMove)

; Check critical opportunities first before mark target for last action
+BehaviorRemovals="AdvCaptain_RedLastActionSelector"
+NewBehaviors=(BehaviorName=AdvCaptain_RedLastActionSelector, NodeType=Selector, Child[0]=AdvCaptainTryGrenade, Child[1]=TryHighPriorityShot, Child[2]=TryMarkTargetOption, Child[3]=TryShootOrReloadOrOverwatch, Child[4]=HuntEnemyWithCover, Child[5]=SelectMove_JobOrDefensive)

[XComGame.XComGameState_AIGroup]
+FallbackExclusionList="ChryssalidSoldier"

[XComGame.XGAIBehavior]
; AOE profiles are needed for the AI to perform any targeting with an AoE ability
+AoEProfiles=( Profile=RocketLauncherProfile, Ability=RocketLauncher, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=RocketLauncherSingleProfile, Ability=RocketLauncher, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=RocketLauncherAggressiveProfile, Ability=RocketLauncher, bUsePrecomputePath=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeLauncherProfile, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeLauncherSingleProfile, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=MassReanimation_LWManyProfile, Ability=MassReanimation_LW, bTargetEnemy=0, bTargetCivilians=0, bTargetCorpses=1, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=4, bRequireLoS=1)
+AoEProfiles=( Profile=MassReanimation_LWFewProfile, Ability=MassReanimation_LW, bTargetEnemy=0, bTargetCivilians=0, bTargetCorpses=1, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=2, bRequireLoS=1)
+AoEProfiles=( Profile=MassMindspinManyProfile, Ability=MassMindspin, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=3, bRequireLoS=1)
+AoEProfiles=( Profile=MassMindspinFewProfile, Ability=MassMindspin, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=StandalonePinionsBasicProfile, Ability=StandalonePinionsStage1, bRequiresOutdoor=1)
+AoEProfiles=( Profile=StandalonePinionsProfile, Ability=StandalonePinionsStage1, MinTargets=3, bFailOnObjectiveFire=False)

; ***                                           MOVEMENT PROFILES                                                   ***
; defensive SniperMove profile, seeks 15-18 tile distance with safe visibility if no target
+m_arrMoveWeightProfile=(Profile=SniperMove, fCoverWeight=0.0f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=0.5, fAllyVisWeight=0.4f, fCloseModifier=0.2f, fFarModifier=2.4f)
; fallback lower cover deweights cover in favor of distance, allowing selection of partial cover (if in full cover now) if it is further away
+m_arrMoveWeightProfile=(Profile=FallbackLowerCover, fCoverWeight=0.02f, fDistanceWeight=-10.0f, fFlankingWeight=0.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=0.9f, fFarModifier=1.1f)

+m_arrMoveWeightProfile=(Profile=MWP_GrappleAway, fCoverWeight=2.0f, fDistanceWeight=2.0f, fFlankingWeight=1.0f, fEnemyVisWeight=0.1f, fEnemyVisWeightPeak1=1.0f, fAllyVisWeight=0, fHeightWeight=1.5f, fCloseModifier=1.0f, fFarModifier=1.0f)

[XComGame.X2AIBTBehaviorTree]
+Behaviors=(BehaviorName=TargetAffectedByEffect-SimulatedCover, NodeType=Condition)
+Behaviors=(BehaviorName=TargetHasNoShield, NodeType=Inverter, Child[0]=TargetAffectedByEffect-SimulatedCover)
+Behaviors=(BehaviorName=IsFlankingTargetWithoutShield, NodeType=Sequence, Child[0]=TargetHasNoShield, Child[1]=IsFlankingTarget)

; -------------------- Falling Back Entity -----------------------------------------
+Behaviors=(BehaviorName=FallBackRoot, NodeType=Selector, Child[0]=FallBack, Child[1]=FallBackWithLoSUnsafe, Child[2]=MoveDefensiveUnsafe, Child[3]=DoCower, Child[4]=SkipMove)

; Flush and Roust perks
+Behaviors=(BehaviorName=FlushRoot, NodeType=Selector, Child[0]=FallBackUnsafe, Child[1]=FallBackLowerCoverUnsafe, Child[2]=MoveRandomUnsafe)

+Behaviors=(BehaviorName=FallBackLowerCoverUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindBestFallbackLowerCoverDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindBestFallbackLowerCoverDestination, NodeType=Selector, Child[0]=FindDestination-FallBackLowerCover)
+Behaviors=(BehaviorName=FindDestination-FallBackLowerCover, NodeType=Action)

;Check for sniper fire, if the check passes, then continue forward with the scoring and action selector
+Behaviors=(BehaviorName=SniperDefense, NodeType=Sequence, Child[0]=SetAlertDataStack, child[1]=SD_SelectBestAlert, Child[2]=HasValidAlertDataLocation, Child[3]=SD_AbilitySelector)
+Behaviors=(BehaviorName=SD_SelectBestAlert, NodeType=RepeatUntilFail, Child[0]=SD_EvaluateAlertData)
+Behaviors=(BehaviorName=SD_EvaluateAlertData, NodeType=Sequence, Child[0]=SetNextAlertData, Child[1]=SD_ScoreAlertData, Child[2]=UpdateBestAlertData)

;only sniper alerts are scored, give them a base score and adjust for distance and age in case there are more than 1
+Behaviors=(BehaviorName=SD_ScoreAlertData, NodeType=Sequence, Child[0]=ScoreSniperFire, Child[1]=SSScoreInvalidAlertData, Child[2]=SD_ScoreAlertDataAge, Child[3]=SD_ScoreAlertDataDistance)
+Behaviors=(BehaviorName=ScoreSniperFire, NodeType=Selector, Child[0]=IfSniperFire, Child[1]=AddToAlertDataScore_100)
;If the alert is took damage or taking fire, is over 24 tiles away, and the damagee has no visible enemies, and not absolute or former absolute, then this is concealed sniper fire against the enemy
+Behaviors=(BehaviorName=IfSniperFire, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=IsAlertDataReallyScary, Child[2]=IsAlertDataThreeMoves, Child[3]=IfAlertIsNotSpottedTarget, Child[4]=AddToAlertDataScore_40)
+Behaviors=(BehaviorName=IsAlertDataReallyScary, NodeType=Selector, Child[0]=AlertDataIsType-TakingFire, Child[1]=AlertDataIsType-TookDamage)
;continue only if there are no former or absolute knowledge alerts for this unit
+Behaviors=(BehaviorName=IfAlertIsNotSpottedTarget, NodeType=Sequence, Child[0]=AlertDataIsNotAbsoluteKnowledge, Child[1]=AlertDataIsNotFormerKnowledge)
+Behaviors=(BehaviorName=AlertDataIsNotAbsoluteKnowledge, NodeType=Inverter, Child[0]=AlertDataIsAbsoluteKnowledge)
+Behaviors=(BehaviorName=AlertDataIsNotFormerKnowledge, NodeType=Inverter, Child[0]=AlertDataWasEnemyThere)

;This reduces the score to the alert by oldest
+Behaviors=(BehaviorName=SD_ScoreAlertDataAge, NodeType=Selector, Child[0]=IfAlertDataOld, Child[1]=SD_IfAlertDataStale, Child[2]=IfAlertDataRecent, Child[3]=IfAlertDataFresh, Child[4]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=SD_IfAlertDataStale, NodeType=Sequence, Child[0]=IsAlertDataStale, Child[1]=AddToAlertDataScore_-15)

;This reduces the score to the alert by distance
+Behaviors=(BehaviorName=SD_ScoreAlertDataDistance, NodeType=Selector, Child[0]=SD_IfAlertDataFar, Child[1]=SD_IfAlertDataThreeMoves, Child[2]=SD_IfAlertDataTwoMoves, Child[3]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=SD_IfAlertDataTwoMoves, NodeType=Sequence, Child[0]=IsAlertDataTwoMoves, Child[1]=AddToAlertDataScore_-5)
+Behaviors=(BehaviorName=SD_IfAlertDataThreeMoves, NodeType=Sequence, Child[0]=IsAlertDataThreeMoves, Child[1]=AddToAlertDataScore_-10)
+Behaviors=(BehaviorName=SD_IfAlertDataFar, NodeType=Sequence, Child[0]=IsAlertDataFar, Child[1]=AddToAlertDataScore_-15)

;Abilities to use, right now it is move forward with cover towards the alert
+Behaviors=(BehaviorName=SD_AbilitySelector, NodeType=Selector, child[0]=SD_FirstAction, child[1]=SD_LastAction)
+Behaviors=(BehaviorName=SD_FirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SD_FirstActionSelector)
+Behaviors=(BehaviorName=SD_LastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SD_LastActionSelector)
+Behaviors=(BehaviorName=SD_FirstActionSelector, NodeType=Selector, child[0]=MoveToAlertIfNotVisible)   
+Behaviors=(BehaviorName=SD_LastActionSelector, NodeType=Selector, Child[0]=MoveToAlertIfNotVisible) 

; ---------------- AoE Targeting thingies -------------------------------------
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherAggressiveProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-MassReanimation_LWManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-MassReanimation_LWFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-MassMindspinManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-MassMindspinFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-StandalonePinionsBasicProfile, NodeType=Action)

+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherAggressiveProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-MassReanimation_LWManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-MassReanimation_LWFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-MassMindspinManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-MassMindspinFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-StandalonePinionsBasicProfile, NodeType=Action)

; -------------- High priority target shooting (shoot if kill or target flanked/exposed) -------------
+Behaviors=(BehaviorName=TryHighPriorityShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=HaveHighPriorityTarget, Child[2]=ShootIfAvailable)
+Behaviors=(BehaviorName=HaveHighPriorityTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=FindHighPriorityTarget, NodeType=RepeatUntilFail, Child[0]=NotHighPriorityEvaluateTarget)
+Behaviors=(BehaviorName=NotHighPriorityEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsNotHighPriority)
+Behaviors=(BehaviorName=TargetIsNotHighPriority, NodeType=Inverter, Child[0]=TargetIsHighPriority)
+Behaviors=(BehaviorName=TargetIsHighPriority, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetIsNotLost, Child[2]=TargetKillableOrFlanked, Child[3]=AddToTargetScore_1000, Child[4]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetKillableOrFlanked, NodeType=Selector, Child[0]=TargetIsKillable,  Child[1]=IsFlankingTargetWithoutShield)

; -------------- High priority target shooting (LEU Version) (shoot if kill or target flanked/exposed) -------------
+Behaviors=(BehaviorName=TryHighPriorityLEU, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightEmUp, Child[1]=HaveHighPriorityLEUTarget, Child[2]=LEUIfAvailable)
+Behaviors=(BehaviorName=HaveHighPriorityLEUTarget, NodeType=Sequence, Child[0]=SetTargetStack-LightEmUp, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-LightEmUp)

; -------------- Killshot target shooting (shoot if kill) -------------
+Behaviors=(BehaviorName=TryKillShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=HaveKillShotTarget, Child[2]=ShootIfAvailable)
+Behaviors=(BehaviorName=HaveKillShotTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=FindKillShotTarget)
+Behaviors=(BehaviorName=FindKillShotTarget, NodeType=RepeatUntilFail, Child[0]=NotKillShotEvaluateTarget)
+Behaviors=(BehaviorName=NotKillShotEvaluateTarget, NodeType=Inverter, Child[0]=KillShotEvaluateTarget)
+Behaviors=(BehaviorName=KillShotEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsKillShot)
+Behaviors=(BehaviorName=TargetIsKillShot, NodeType=Sequence, Child[0]=TargetIsKillable)

; ---------------- LightEmUp (MutonM3_LW, Elite) --------------------------------------------
+Behaviors=(BehaviorName=IsAbilityAvailable-LightEmUp, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LightEmUp, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LightEmUp, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LightEmUp, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-LightEmUp, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LightEmUp, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-LightEmUp, NodeType=Action)

; ---------------- RedAlert Fallback actions for various types --------------------------------------------
; Note: These nodes use the bare 'RandOverwatchXX' that only test if the overwatch ability is active, it does no scoring
; based on to-hit chances (which will often fail the node entirely if the unit can see no enemies or the standard shot action
; is disabled for some reason). This is important to get AI to overwatch when they have nothing else to do.
+Behaviors=(BehaviorName=AdventRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=DoCower, Child[2]=SkipMove)
+Behaviors=(BehaviorName=MECRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=SkipMove)
+Behaviors=(BehaviorName=AlienRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=SkipMove)


; ----------------------------------------------------------------------------------------------------------
; -------------------- MutonM2_LW (Centurion) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; "Select Attack if Ideal" includes grenade and melee attack if already in position
+Behaviors=(BehaviorName="LWMutonM2::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MutonM2_LWRedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=MutonM2_LWRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MutonM2_LWRedAbilitySelector)
+Behaviors=(BehaviorName=MutonM2_LWRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MutonM2_LWRedFirstAction, Child[2]=MutonM2_LWRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=MutonM2_LWRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MutonM2_LWRedFirstActionSelector)
+Behaviors=(BehaviorName=MutonM2_LWRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryBayonetKill, \\
	Child[1]=TryWarCryOnMultipleTargets, \\
	Child[2]=TryBayonet, \\
	Child[3]=TryMoveForGrenade, \\
	Child[4]=TryBayonetCharge, \\
	Child[5]=TryMoveToSuppressClosest, \\
	Child[6]=TryTwoTurnAttackSupportIfSafe, \\
	Child[7]=NeedsReload, \\
	Child[8]=SelectMoveProfileByJob, \\
	Child[9]=TryShootOrReloadOrOverwatch, \\
	Child[10]=TryWarCryOnFewTargets, \\
	Child[11]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=MutonM2_LWRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MutonM2_LWRedLastActionSelector)
+Behaviors=(BehaviorName=MutonM2_LWRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryBayonet, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryGrenade, \\
	Child[3]=TrySuppressClosest, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SelectMove_JobOrAggressive)

; ---------------- BayonetKill (MutonM2_LW, Centurion) --------------------------------------------

+Behaviors=(BehaviorName=TryBayonetKill, NodeType=Sequence, Child[0]=IsAbilityReady-Bayonet, Child[1]=TargetIsKillable, Child[2]=BayonetStepSelector)

; ---------------- BayonetCharge (MutonM2_LW, Centurion) --------------------------------------------
+Behaviors=(BehaviorName=HasValidTarget-BayonetCharge, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-BayonetCharge, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityReady-BayonetCharge, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-BayonetCharge, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BayonetCharge, NodeType=Action)
+Behaviors=(BehaviorName=EnoughAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=3)

; usage
+Behaviors=(BehaviorName=TryBayonetCharge, NodeType=Sequence, Child[0]=IsAbilityReady-BayonetCharge, Child[1]=BayonetChargeConditions, Child[2]=BayonetChargeStepSelector)
+Behaviors=(BehaviorName=BayonetChargeConditions, NodeType=Selector, Child[0]=HasLowHP, Child[1]=EnoughAlliesVisible)
+Behaviors=(BehaviorName=BayonetChargeStepSelector, NodeType=Selector, Child[0]=BayonetChargeAttack, Child[1]=MoveMeleeDefensiveIfFirstAbility)
+Behaviors=(BehaviorName=BayonetChargeAttack, NodeType=Sequence, Child[0]=IsAbilityAvailable-BayonetCharge, Child[1]=SelectTargetForBayonetCharge, Child[2]=SelectAbility-BayonetCharge)

; targeting
+Behaviors=(BehaviorName=SelectTargetForBayonetCharge, NodeType=Sequence, Child[0]=SetTargetStack-BayonetCharge, Child[1]=SelectBestTargetForStandardMelee, Child[2]=HasValidTarget-BayonetCharge)
+Behaviors=(BehaviorName=SelectBestTargetForBayonetCharge, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialMeleeTarget)

; ---------------- WarCry (MutonM2_LW, Centurion) --------------------------------------------
+Behaviors=(BehaviorName=HasValidTarget-WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-WarCry, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityReady-WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-WarCry, NodeType=Action)
+Behaviors=(BehaviorName=HasMultipleWarCryTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-WarCry, Param[1]=">=", Param[2]=4)
+Behaviors=(BehaviorName=HasFewWarCryTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-WarCry, Param[1]=">=", Param[2]=2)
+Behaviors=(BehaviorName=IsTargetInMovementRange-WarCry, NodeType=Condition)

+Behaviors=(BehaviorName=TryWarCryOnMultipleTargets, NodeType=Sequence, Child[0]=IsAbilityAvailable-WarCry, Child[1]=HasMultipleWarCryTargets, Child[2]=SelectAbility-WarCry)
+Behaviors=(BehaviorName=TryWarCryOnFewTargets, NodeType=Sequence, Child[0]=IsAbilityAvailable-WarCry, Child[1]=HasFewWarCryTargets, Child[2]=SelectAbility-WarCry)

+Behaviors=(BehaviorName=SelectPotentialTargetForWarCry, NodeType=Sequence, Child[0]=SetPotentialAllyTargetStack, Child[1]=SelectBestAllyTargetForWarCry, Child[2]=HasValidTarget-Potential)
+Behaviors=(BehaviorName=SelectBestAllyTargetForWarCry, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialWarCryTarget)
+Behaviors=(BehaviorName=EvaluatePotentialWarCryTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForWarCry, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForWarCry, NodeType=Successor, Child[0]=TargetScoreReachableForWarCry)
+Behaviors=(BehaviorName=TargetScoreReachableForWarCry, NodeType=Sequence, Child[0]=IsTargetInMovementRange-WarCry, Child[1]=AvoidBoundAndPanickedTargets, Child[2]=ScoreByHP)
+Behaviors=(BehaviorName=ScoreByHP, NodeType=Sequence, Child[0]=TargetScoreByScaledMaxStat-eStat_HP, Child[1]=TargetScoreByScaledCurrStat-eStat_HP)
+Behaviors=(BehaviorName=TargetScoreByScaledMaxStat-eStat_HP, NodeType=Action, Param[0]=10)
+Behaviors=(BehaviorName=TargetScoreByScaledCurrStat-eStat_HP, NodeType=Action, Param[0]=1)

; ----------------------------------------------------------------------------------------------------------
; -------------------- MutonM3_LW (Elite or "The Bluton") --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Updated to activate personal shield as priority when available
+Behaviors=(BehaviorName="LWMutonM3::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MutonM3_LWRedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=MutonM3_LWRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MutonM3_LWRedAbilitySelector)
+Behaviors=(BehaviorName=MutonM3_LWRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MutonM3_LWRedFirstAction, Child[2]=MutonM3_LWRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=MutonM3_LWRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MutonM3_LWRedFirstActionSelector)
+Behaviors=(BehaviorName=MutonM3_LWRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryPersonalShield, \\
	Child[1]=TryBayonetKill, \\
	Child[2]=TryWarCryOnMultipleTargets, \\
	Child[3]=TryBayonet, \\
	Child[4]=DoIfFlankedMove, \\
	Child[5]=RandFilterTryLEU, \\
	Child[6]=TryMoveThenGrenade, \\
	Child[7]=TryBayonetCharge, \\
	Child[8]=NeedsReload, \\
	Child[9]=SelectMoveProfileByJob, \\
	Child[10]=TryLEUOrReload, \\
	Child[11]=TryWarCryOnFewTargets, \\
	Child[12]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=MutonM3_LWRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MutonM3_LWRedLastActionSelector)
+Behaviors=(BehaviorName=MutonM3_LWRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryBayonet, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryGrenade, \\
	Child[3]=TrySuppressClosest, \\
	Child[4]=TryLEUOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SelectMove_JobOrAggressive)

+Behaviors=(BehaviorName=RandFilterTryLEU, NodeType=RandFilter, Child[0]=LEUIfAvailable, Param[0]=60)

+Behaviors=(BehaviorName=TryLEUOrReload, NodeType=Selector, Child[0]=LEUIfAvailable, Child[1]=NeedsReload)
+Behaviors=(BehaviorName=TryLEUOrReloadOrOverwatch, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=LEUIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=LEUIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightEmUp, Child[1]=SelectTargetForLEU, Child[2]=SelectAbility-LightEmUp)
+Behaviors=(BehaviorName=SelectTargetForLEU, NodeType=Sequence, Child[0]=SetTargetStack-LightEmUp, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-LightEmUp)

; ---------------- Personal Shield (MutonM3_LW, Elite) --------------------------------------------
+Behaviors=(BehaviorName=TryPersonalShield, NodeType=Sequence, Child[0]=IsAbilityAvailable-PersonalShield, Child[1]=SelectAbility-PersonalShield)
+Behaviors=(BehaviorName=IsAbilityAvailable-PersonalShield, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-PersonalShield, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; -------------------------------------- ADVENT ROCKETEER --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Updated to try and shoot rocket launcher as first action (assuming it is move-or-shoot)
+Behaviors=(BehaviorName="LWAdventRocketeer::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventRocketeer_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventRocketeer_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventRocketeer_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventRocketeer_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventRocketeerRedFirstAction, Child[2]=LWAdventRocketeerRedLastAction, Child[3]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventRocketeerRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventRocketeerRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventRocketeerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryRocketLauncher, \\
	Child[2]=TryRocketLauncherSingle33, \\
	Child[3]=NeedsReload, \\
	Child[4]=SelectMove_JobOrDefensive, \\
	Child[5]=TryMoveThenGrenade, \\
	Child[6]=TryShootOrReloadOrOverwatch, \\
	Child[7]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventRocketeerRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventRocketeerRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventRocketeerRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryRocketLauncher, \\
	Child[1]=TryShootOrReloadOrOverwatch, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryRocketLauncher, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile, Child[2]=SelectAoETarget-RocketLauncherProfile, Child[3]=SelectAbility-RocketLauncher)
+Behaviors=(BehaviorName=IsAbilityAvailable-RocketLauncher, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RocketLauncher, NodeType=Action)

+Behaviors=(BehaviorName=TryRocketLauncherSingle, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherSingleProfile, Child[2]=SelectAoETarget-RocketLauncherSingleProfile, Child[3]=SelectAbility-RocketLauncher)
+Behaviors=(BehaviorName=TryRocketLauncherSingle33, NodeType=RandFilter, Child[0]=TryRocketLauncherSingle, Param[0]=33)

; ----------------------------------------------------------------------------------------------------------
; -------------------------------------- ADVENT GRENADIER --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Updated to allow firing their grenade launcher -- LIMITATION: only works with a single grenade type
+Behaviors=(BehaviorName="LWAdventGrenadier::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventGrenadierRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventGrenadierRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventGrenadier_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventGrenadier_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventGrenadierRedFirstAction, Child[2]=LWAdventGrenadierRedLastAction, Child[3]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventGrenadierRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventGrenadierRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventGrenadierRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryMoveThenGrenadeLauncher, \\
	Child[2]=NeedsReload, \\
	Child[3]=SelectMove_JobOrDefensive, \\
	Child[4]=TryMoveThenGrenadeLauncher, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventGrenadierRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventGrenadierRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventGrenadierRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryGrenadeLauncher, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryGrenadeLauncherSingle33, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=TryGrenadeLauncherSingle, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryMoveThenGrenadeLauncher, NodeType=Selector, Child[0]=TryMoveForGrenadeLauncher, Child[1]=TryGrenadeLauncher)
+Behaviors=(BehaviorName=TryMoveForGrenadeLauncher, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-LaunchGrenade, Child[2]=FindPotentialAoETargets-GrenadeLauncherProfile, Child[3]=MoveStandardIfFirstAbility-GrenadeLauncher)

+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-GrenadeLauncher, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindGrenadeLauncherDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindGrenadeLauncherDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-LaunchGrenade, Child[2]=RestrictToEnemyLoS, Child[3]=FindRestrictedDestination-MWP_Standard)

+Behaviors=(BehaviorName=TryGrenadeLauncher, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile, Child[2]=SelectAoETarget-GrenadeLauncherProfile, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncherSingle, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherSingleProfile, Child[2]=SelectAoETarget-GrenadeLauncherSingleProfile, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncherSingle33, NodeType=RandFilter, Child[0]=TryGrenadeLauncherSingle, Param[0]=33)
+Behaviors=(BehaviorName=IsAbilityAvailable-LaunchGrenade, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LaunchGrenade, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LaunchGrenade, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LaunchGrenade, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; ---------------------------------------- ADVENT SENTRY ---------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; adding basic high priority target shooting
+Behaviors=(BehaviorName="LWAdventSentry::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventSentry_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventSentry_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventSentry_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventSentry_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventSentryRedFirstAction, Child[2]=LWAdventSentryRedLastAction, Child[3]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventSentryRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventSentryRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventSentryRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=NeedsReload, \\
	Child[2]=SelectMove_JobOrDefensive, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventSentryRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventSentryRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventSentryRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryHighPriorityShot, \\
	Child[1]=TryGrenade, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMove_JobOrDefensive)

; ----------------------------------------------------------------------------------------------------------
; --------------------------------------- ADVENT GUNNER ----------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Abilities to handle :
; 'AreaSuppression' -- AOE targeting
; 'LockedOn' -- bonus to shooting at same unit, shouldn't require anything special
; 'TraverseFire' -- shooting doesn't end turn if done as first action -- only on M3, so split into separate root
; 'DangerZone' -- increases suppression area, shouldn't require anything special

+Behaviors=(BehaviorName="LWAdventGunner::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventGunnerRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventGunnerRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventGunner_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventGunner_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventGunnerRedFirstAction, Child[2]=LWAdventGunnerRedLastAction, Child[3]=LWAdventGunnerRedPostTraverseFireAction, Child[4]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventGunnerRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventGunnerRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventGunnerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=NeedsReload, \\
	Child[2]=TryHighPriorityShot, \\
	Child[3]=TryMoveOrTraverseFire, \\
	Child[4]=SelectMove_JobOrDefensive, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventGunnerRedPostTraverseFireAction, NodeType=Sequence, Child[0]=WasLastAbility-StandardShot, Child[1]=LWAdventGunnerRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventGunnerRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventGunnerRedLastActionSelector)
; Rolls twice for TryAreaSuppression, since "per-ally" check is fixed at 10%
+Behaviors=(BehaviorName=LWAdventGunnerRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryHighPriorityShot, \\
	Child[1]=TryAreaSuppression, \\
	Child[2]=TryAreaSuppression, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryMoveOrTraverseFire, NodeType=RandSelector, Child[0]=SelectMove_JobOrDefensive, Param[0]=33, Child[1]=TryTraverseFire, Param[1]=67)
+Behaviors=(BehaviorName=TryTraverseFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-TraverseFire, Child[1]=TryShootOrReload)

+Behaviors=(BehaviorName=TryAreaSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-AreaSuppression, Child[1]=CheckShouldSuppressVar, Child[2]=SelectTargetForAreaSuppressionByAim, Child[3]=SelectAbility-AreaSuppression)
+Behaviors=(BehaviorName=SelectTargetForAreaSuppressionByAim, NodeType=Sequence, Child[0]=SetTargetStack-AreaSuppression, Child[1]=SelectBestSuppressionTargetByAim, Child[2]=HasValidTarget-AreaSuppression)

+Behaviors=(BehaviorName=IsAbilityAvailable-TraverseFire, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-AreaSuppression, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AreaSuppression, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-AreaSuppression, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-AreaSuppression, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-AreaSuppression, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------ MEC ARCHER (SUPPORT MEC) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Same as ADVENT MEC M2 - shouldn't need any changes for basic behavior
+Behaviors=(BehaviorName="LWAdventMECArcher::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MECMk2RedAlert, Child[3]=GenericAlertHandler)


; ----------------------------------------------------------------------------------------------------------
; ----------------------------------- NAJA (VIPER SNIPER) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Same as Viper - updated to account for move-or-fire for sniper rifle
+Behaviors=(BehaviorName="LWNaja::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWNajaRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWNajaRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWNajaRedAbilitySelector)
+Behaviors=(BehaviorName=LWNajaRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWNajaRedFirstAction, Child[2]=LWNajaRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=LWNajaRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWNajaRedFirstActionSelector)
+Behaviors=(BehaviorName=LWNajaRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedSniperMove, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TrySniperShootOrReload, \\
	Child[3]=MoveIfAnyEnemyWithin12Tiles, \\
	Child[4]=TrySniperShootOrReloadOrOverwatch, \\
	Child[5]=TryMoveThenPoisonSpit, \\
	Child[6]=SniperMoveIfEnemyVisible, \\
	Child[7]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWNajaRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWNajaRedLastActionSelector)
+Behaviors=(BehaviorName=LWNajaRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryHighPriorityShot, \\
	Child[1]=DoIfFlankedSniperMove, \\
	Child[2]=MoveIfAnyEnemyWithin12Tiles, \\
	Child[3]=TrySniperShootOrReloadOrOverwatch, \\
	Child[4]=TryPoisonSpitSingle, \\
	Child[5]=RestrictedSniperMoveOnly, \\
	Child[6]=HoldGroundIfEnemyVisible, \\
	Child[7]=SniperMove, \\
	Child[8]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=DoIfFlankedSniperMove, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=SniperMove)
+Behaviors=(BehaviorName=HoldGroundIfEnemyVisible, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=SkipMove)
+Behaviors=(BehaviorName=SniperMoveIfEnemyVisible, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=SniperMove)

+Behaviors=(BehaviorName=RandMoveIfEnemyClose, NodeType=RandFilter, Child[0]=MoveIfAnyEnemyWithin12Tiles, Param[0]=60)
+Behaviors=(BehaviorName=MoveIfAnyEnemyWithin12Tiles, NodeType=Sequence, Child[0]=AnyEnemyWithin12Tiles, Child[1]=SniperMove)
+Behaviors=(BehaviorName=AnyEnemyWithin12Tiles, NodeType=Sequence, Child[0]=SetVisiblePotentialTargetStack, Child[1]=SearchAnyEnemyWithin12Tiles, Child[2]=HasValidTarget-Potential)
+Behaviors=(BehaviorName=SearchAnyEnemyWithin12Tiles, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForWithin12Tiles)
+Behaviors=(BehaviorName=IterateNextTargetForWithin12Tiles, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForWithin12Tiles, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForWithin12Tiles, NodeType=Successor, Child[0]=EvaluateForWithin12Tiles)
+Behaviors=(BehaviorName=EvaluateForWithin12Tiles, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamResistance, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=AddToTargetScore_-100, Child[7]=SSScoreTargetIfWithin12Tiles)
+Behaviors=(BehaviorName=SSScoreTargetIfWithin12Tiles, NodeType=Successor, Child[0]=ScoreTargetIfWithin12Tiles)
+Behaviors=(BehaviorName=ScoreTargetIfWithin12Tiles, NodeType=Sequence, Child[0]=TargetDistanceLesserThan12Tiles, Child[1]=AddToTargetScore_300)
+Behaviors=(BehaviorName=TargetDistanceLesserThan12Tiles, NodeType=StatCondition, Param[0]=PotentialTargetDistance, Param[1]="<", Param[2]=18)

+Behaviors=(BehaviorName=TrySniperShootOrReload, NodeType=Selector, Child[0]=SniperShootIfAvailable, Child[1]=NeedsReload)
+Behaviors=(BehaviorName=SniperShootIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperStandardFire, Child[1]=SelectTargetForSniperShot, Child[2]=SelectAbility-SniperStandardFire)
+Behaviors=(BehaviorName=SelectTargetForSniperShot, NodeType=Sequence, Child[0]=SetTargetStack-SniperStandardFire, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-SniperStandardFire)

+Behaviors=(BehaviorName=TrySniperShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=ConsiderTakingSniperOverwatch, Child[1]=SniperShootIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=ConsiderTakingSniperOverwatch, NodeType=Selector, Child[0]=TryTwoTurnSniperAttackSupport, Child[1]=ConsiderTakingOverwatchAllUnits, Child[2]=ConsiderTakingOverwatchVIP, Child[3]=ConsiderTakingOverwatchEvac)
+Behaviors=(BehaviorName=TryTwoTurnSniperAttackSupport, NodeType=Sequence, Child[0]=HasTwoTurnAttackTargets, Child[1]=TrySniperOverwatchTwoTurnTarget)
+Behaviors=(BehaviorName=TrySniperOverwatchTwoTurnTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperRifleOverwatch, Child[1]=RandOverwatch100_50)


+Behaviors=(BehaviorName=IsAbilityAvailable-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-SniperStandardFire, NodeType=Action)

+Behaviors=(BehaviorName=IsAbilityAvailable-SniperRifleOverwatch, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-SniperRifleOverwatch, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SniperRifleOverwatch, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-SniperRifleOverwatch, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-SniperRifleOverwatch, NodeType=Action)


; SNIPER MOVEMENT
+Behaviors=(BehaviorName=FindDestination-SniperMove, NodeType=Action)
+Behaviors=(BehaviorName=FindDestinationWithLoS-SniperMove, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SniperMove, NodeType=Action)
 
+Behaviors=(BehaviorName=SniperMove, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=SniperMoveUnsafeSelector)
+Behaviors=(BehaviorName=SniperMoveUnsafeSelector, NodeType=Selector, Child[0]=SniperMoveUnsafeDashIfFlanked, Child[1]=SniperMoveUnsafe)
+Behaviors=(BehaviorName=SniperMoveUnsafeDashIfFlanked, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=CheckIfNeedToMove, Child[2]=SniperMoveUnsafeDash)
+Behaviors=(BehaviorName=SniperMoveUnsafeDash, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=OverrideIdealRange-21, Child[4]=UseDashMovement, Child[5]=FindBestSniperDestination, Child[6]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SniperMoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=OverrideIdealRange-21, Child[4]=FindBestSniperDestination, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindBestSniperDestination, NodeType=Selector, Child[0]=FindRestrictedDestination-SniperMove, Child[1]=FindRestrictedDestination-MWP_Defensive, Child[2]=FindDestination-MWP_Defensive)
+Behaviors=(BehaviorName=RestrictedSniperMoveOnly, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=OverrideIdealRange-21, Child[4]=FindRestrictedDestination-SniperMove, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=OverrideIdealRange-21, NodeType=Action, Param[0]=21)

+Behaviors=(BehaviorName=SniperMoveWithLoS, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=SniperMoveWithLoSUnsafe)
+Behaviors=(BehaviorName=SniperMoveWithLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-SniperMove, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=NCSniperMoveWithLoS, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=NCSniperMoveWithLoSUnsafe)
+Behaviors=(BehaviorName=NCSniperMoveWithLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetNoCoverMovement, Child[3]=FindDestinationWithLoS-SniperMove, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindFriendlySniperDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAllyLoS, Child[2]=FindRestrictedDestination-SniperMove)

+Behaviors=(BehaviorName=SniperMoveIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMove)
+Behaviors=(BehaviorName=SniperMoveIfFirstAbilityUnsafe, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMoveUnsafe)
+Behaviors=(BehaviorName=SniperMoveWithLoSIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMoveWithLoS)
+Behaviors=(BehaviorName=SniperMoveWithLoSIfFirstAbilityUnsafe, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMoveWithLoSUnsafe)

; ----------------------------------------------------------------------------------------------------------
; ---------------------------- SIDEWINDER (VIPER FLANKER) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Same as Viper
+Behaviors=(BehaviorName="LWSidewinder::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ViperRedAlert, Child[3]=GenericAlertHandler)

; Modified to better utilize the HitAndRun ability -- will move unsafely with first move to flank, under assumption will hit and get third move
+Behaviors=(BehaviorName="LWSidewinderHitAndRun::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWSidewinderRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWSidewinderRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWSidewinderRedAbilitySelector)
+Behaviors=(BehaviorName=LWSidewinderRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWSidewinderRedFirstAction, Child[2]=LWSidewinderRedSecondAction, Child[3]=LWSidewinderRedLastAction, Child[4]=TrySlitherPostStandardShot, Child[5]=AlienRedFallbackAction)
+Behaviors=(BehaviorName=WasLastAbility-StandardShot, NodeType=Condition)

+Behaviors=(BehaviorName=TrySlitherPostStandardShot, NodeType=Sequence, Child[0]=WasLastAbility-StandardShot, Child[1]=FindStealthDestination_AvoidEnemy, Child[2]=SelectAbility-StandardMove)


+Behaviors=(BehaviorName=LWSidewinderRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWSidewinderRedFirstActionSelector)
+Behaviors=(BehaviorName=LWSidewinderRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=MoveFlankingUnsafe, \\
	Child[1]=DoIfFlankedMove, \\
	Child[2]=NeedsReload, \\
	Child[3]=SelectMove_JobOrAggressive, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWSidewinderRedSecondAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWSidewinderRedSecondActionSelector)
+Behaviors=(BehaviorName=LWSidewinderRedSecondActionSelector, NodeType=Selector, \\
	Child[0]=TryShootOrReloadOrOverwatch, \\
	Child[1]=HuntEnemyWithCover, \\
	Child[2]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=LWSidewinderRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWSidewinderRedLastActionSelector)
+Behaviors=(BehaviorName=LWSidewinderRedLastActionSelector, NodeType=Selector, \\
	Child[0]=FallBackWithLoS)

; ----------------------------------------------------------------------------------------------------------
; ---------------------- SectoidM2_LW (SECTOID COMMANDER) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Currently a placeholder copy of the Sectoid
; Needs updating for active abilities:
; 'MassMindspin' -- like mindspin, but more people -- cone AOE Targetable attack
; 'MassReanimation_LW' -- like gatekeeper ability, but unique because of animations
+Behaviors=(BehaviorName="LWSectoidM2::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SectoidM2_LWRedAlert, Child[3]=SectoidM2_LWNoEnemySightedMove)
+Behaviors=(BehaviorName=SectoidM2_LWRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SectoidM2_LWRedAbilitySelector)
+Behaviors=(BehaviorName=SectoidM2_LWRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SectoidM2_LWRedFirstAction, Child[2]=SectoidM2_LWRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=SectoidM2_LWRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SectoidM2_LWRedFirstActionSelector)
+Behaviors=(BehaviorName=SectoidM2_LWRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryKillShot, \\
	Child[2]=TryMoveForMassReanimation_LWMany, \\
	Child[3]=TryMoveForMassMindspinMany, \\
	Child[4]=NeedsReload, \\
	Child[5]=SelectMove_JobOrDefensive, \\
	Child[6]=TryMoveForMassMindspinFew, \\
	Child[7]=TryMoveForMassReanimation_LWFew, \\
	Child[8]=TryShootOrReloadOrOverwatch, \\
	Child[9]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=SectoidM2_LWRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SectoidM2_LWRedLastActionSelector)
+Behaviors=(BehaviorName=SectoidM2_LWRedLastActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryKillShot, \\
	Child[2]=TryMassReanimation_LWMany, \\
	Child[3]=TryMassMindspinMany, \\
	Child[4]=TryHighPriorityShot, \\
	Child[5]=TryMassMindspinFew, \\
	Child[6]=TryMassReanimation_LWFew, \\
	Child[7]=TryShootOrReloadOrOverwatch, \\
	Child[8]=HuntEnemyWithCover, \\
	Child[9]=SelectMove_JobOrDefensive)


; ---------------- No enemy sighted re-animation actions ---------------------------
+Behaviors=(BehaviorName=SectoidM2_LWNoEnemySightedMove, NodeType=Selector, Child[0]=GenericOrangeMovement, Child[1]=SectoidM2_LWYellowAlert, Child[2]=GenericGreenMovement)
+Behaviors=(BehaviorName=SectoidM2_LWYellowAlert, NodeType=Sequence, Child[0]=IsYellowAlert, Child[1]=SectoidM2_LWYellowAbilitySelector)
+Behaviors=(BehaviorName=SectoidM2_LWYellowAbilitySelector, NodeType=Selector, Child[0]=TryMassReanimation_LWMany, Child[1]=GenericAlertHandler)

; ---------------- Mass Mindspin (SectoidM2_LW) -----------------------------------------
+Behaviors=(BehaviorName=TryMassMindspinMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassMindspin, Child[1]=FindPotentialAoETargets-MassMindspinManyProfile, Child[2]=SelectAoETarget-MassMindspinManyProfile,  Child[3]=SelectAbility-MassMindspin)
+Behaviors=(BehaviorName=TryMassMindspinFew, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassMindspin, Child[1]=FindPotentialAoETargets-MassMindspinFewProfile, Child[2]=SelectAoETarget-MassMindspinFewProfile,  Child[3]=SelectAbility-MassMindspin)

+Behaviors=(BehaviorName=TryMoveThenMassMindspinMany, NodeType=Selector, Child[0]=TryMoveForMassMindspinMany, Child[1]=TryMassMindspinMany)
+Behaviors=(BehaviorName=TryMoveForMassMindspinMany, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-MassMindspin, Child[2]=FindPotentialAoETargets-MassMindspinManyProfile, Child[3]=MoveStandardIfFirstAbility-MassMindspin)

+Behaviors=(BehaviorName=TryMoveThenMassMindspinFew, NodeType=Selector, Child[0]=TryMoveForMassMindspinFew, Child[1]=TryMassMindspinFew)
+Behaviors=(BehaviorName=TryMoveForMassMindspinFew, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-MassMindspin, Child[2]=FindPotentialAoETargets-MassMindspinFewProfile, Child[3]=MoveStandardIfFirstAbility-MassMindspin)

+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-MassMindspin, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassMindspin, Child[1]=NotLastActionPoint, Child[2]=FindMassMindspinDestination, Child[3]=SelectAbility-MassMindspin)
+Behaviors=(BehaviorName=FindMassMindspinDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-MassMindspin, Child[2]=RestrictToEnemyLoS, Child[3]=FindRestrictedDestination-MWP_Defensive)

+Behaviors=(BehaviorName=IsAbilityAvailable-MassMindspin, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-MassMindspin, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-MassMindspin, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-MassMindspin, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-MassMindspin, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-MassMindspin, NodeType=Action)

; ---------------- Mass Psi Reanimate (SectoidM2_LW) ------------------------------------
+Behaviors=(BehaviorName=TryMassReanimation_LWMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassReanimation_LW, Child[1]=FindPotentialAoETargets-MassReanimation_LWManyProfile, Child[2]=SelectAoETarget-MassReanimation_LWManyProfile,  Child[3]=SelectAbility-MassReanimation_LW)
+Behaviors=(BehaviorName=TryMassReanimation_LWFew, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassReanimation_LW, Child[1]=FindPotentialAoETargets-MassReanimation_LWFewProfile, Child[2]=SelectAoETarget-MassReanimation_LWFewProfile,  Child[3]=SelectAbility-MassReanimation_LW)

+Behaviors=(BehaviorName=TryMoveThenMassReanimation_LWMany, NodeType=Selector, Child[0]=TryMoveForMassReanimation_LWMany, Child[1]=TryMassReanimation_LWMany)
+Behaviors=(BehaviorName=TryMoveForMassReanimation_LWMany, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-MassReanimation_LW, Child[2]=FindPotentialAoETargets-MassReanimation_LWManyProfile, Child[3]=MoveStandardIfFirstAbility-MassReanimation_LW)

+Behaviors=(BehaviorName=TryMoveThenMassReanimation_LWFew, NodeType=Selector, Child[0]=TryMoveForMassReanimation_LWFew, Child[1]=TryMassReanimation_LWFew)
+Behaviors=(BehaviorName=TryMoveForMassReanimation_LWFew, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-MassReanimation_LW, Child[2]=FindPotentialAoETargets-MassReanimation_LWFewProfile, Child[3]=MoveStandardIfFirstAbility-MassReanimation_LW)

+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-MassReanimation_LW, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassReanimation_LW, Child[1]=NotLastActionPoint, Child[2]=FindMassReanimation_LWDestination, Child[3]=SelectAbility-MassReanimation_LW)
+Behaviors=(BehaviorName=FindMassReanimation_LWDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-MassReanimation_LW, Child[2]=RestrictToEnemyLoS, Child[3]=FindRestrictedDestination-MWP_Defensive)

+Behaviors=(BehaviorName=IsAbilityAvailable-MassReanimation_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-MassReanimation_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-MassReanimation_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-MassReanimation_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-MassReanimation_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-MassReanimation_LW, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------------------ LWDrone -------------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Select attack if in range, otherwise defend
+Behaviors=(BehaviorName="LWDrone::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWDroneRedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=LWDroneRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWDroneRedAbilitySelector)
+Behaviors=(BehaviorName=LWDroneRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWDroneRedFirstAction, Child[2]=LWDroneRedLastAction, Child[3]=MECRedFallbackAction)

+Behaviors=(BehaviorName=LWDroneRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWDroneRedFirstActionSelector)
+Behaviors=(BehaviorName=LWDroneRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryHighPriorityShock, \\
	Child[1]=TryMoveForDroneRepair, \\
	Child[2]=TryMoveForDroneMeleeStun, \\
	Child[3]=TryDroneFlankingMove, \\
	Child[4]=TryDroneRegularMove, \\
	Child[5]=HuntEnemyUnsafe)


+Behaviors=(BehaviorName=LWDroneRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWDroneRedLastActionSelector)
+Behaviors=(BehaviorName=LWDroneRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryMeleeStun, \\
	Child[1]=TryHighPriorityShock, \\
	Child[2]=TryRepairOrShock, \\
	Child[3]=ShockIfAvailable, \\
	Child[4]=HuntEnemyUnsafe, \\
	Child[5]=TryDroneRegularMove)


+Behaviors=(BehaviorName=TryDroneFlankingMove, NodeType=Sequence, Child[0]=IsMyJob-Soldier, Child[1]=IsAbilityAvailable-StandardMove, Child[2]=ResetDestinationSearch, Child[3]=RestrictToFlanking, Child[4]=SetNoCoverMovement, Child[5]=RestrictToAbilityRange-LWDroneShock, Child[6]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=TryDroneRegularMove, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetNoCoverMovement, Child[3]=RestrictToAbilityRange-LWDroneShock, Child[4]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=TryHighPriorityShock, NodeType=Sequence, Child[0]=IsAbilityAvailable-LWDroneShock, Child[1]=HaveHighPriorityShockTarget, Child[2]=ShockIfAvailable)
+Behaviors=(BehaviorName=HaveHighPriorityShockTarget, NodeType=Sequence, Child[0]=SetTargetStack-LWDroneShock, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-LWDroneShock)

+Behaviors=(BehaviorName=TryMeleeStun, NodeType=Sequence, Child[0]=IsAbilityAvailable-LWDroneMeleeStun, Child[1]=SelectTargetForMeleeStun, Child[2]=SelectAbility-LWDroneMeleeStun)
+Behaviors=(BehaviorName=SelectTargetForMeleeStun, NodeType=Sequence, Child[0]=SetTargetStack-LWDroneMeleeStun, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-LWDroneMeleeStun)

+Behaviors=(BehaviorName=TryRepairOrShock, NodeType=RandSelector, Child[0]=DroneRepairIfAvailable, Param[0]=70, Child[1]=ShockIfAvailable, Param[1]=30)

+Behaviors=(BehaviorName=ShockIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-LWDroneShock, Child[1]=SelectTargetForShock, Child[2]=SelectAbility-LWDroneShock)
+Behaviors=(BehaviorName=SelectTargetForShock, NodeType=Sequence, Child[0]=SetTargetStack-LWDroneShock, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-LWDroneShock)

+Behaviors=(BehaviorName=DroneRepairIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-LWDroneRepair, Child[1]=SelectTargetForDroneRepair, Child[2]=SelectAbility-LWDroneRepair)

+Behaviors=(BehaviorName=TryMoveForDroneRepair, NodeType=Sequence, Child[0]=IsMyJob-Support, Child[1]=SafeToMove, Child[2]=IsAbilityReady-LWDroneRepair, Child[3]=SelectTargetForDroneRepair, Child[4]=MoveStandardIfFirstAbility-LWDroneRepair)
+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-LWDroneRepair, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindDroneRepairDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindDroneRepairDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToPotentialTargetRange-LWDroneRepair, Child[2]=FindRestrictedDestination-MWP_Fanatic)

+Behaviors=(BehaviorName=SelectTargetForDroneRepair, NodeType=Sequence, Child[0]=SetTargetStack-LWDroneRepair, Child[1]=SelectBestTargetForDroneRepair, Child[2]=HasValidTarget-LWDroneRepair)
+Behaviors=(BehaviorName=SelectBestTargetForDroneRepair, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetsDroneRepair)
+Behaviors=(BehaviorName=EvaluateTargetsDroneRepair, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHighestSoldierRank, Child[2]=TargetScoreHealth, Child[3]=TargetScoreInvalidateCivilians, Child[4]=UpdateBestTarget)

+Behaviors=(BehaviorName=TryMoveForDroneMeleeStun, NodeType=Sequence, Child[0]=IsMyJob-Aggressor, Child[1]=IsAbilityReady-LWDroneMeleeStun, Child[2]=SelectTargetForDroneMeleeStun, Child[3]=MoveStandardIfFirstAbility-LWDroneMeleeStun)
+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-LWDroneMeleeStun, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindDroneMeleeStunDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindDroneMeleeStunDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToPotentialTargetRange-LWDroneMeleeStun, Child[2]=FindRestrictedDestination-MWP_Fanatic)

+Behaviors=(BehaviorName=SelectTargetForDroneMeleeStun, NodeType=Sequence, Child[0]=SetTargetStack-LWDroneMeleeStun, Child[1]=SelectBestTargetForDroneMeleeStun, Child[2]=HasValidTarget-LWDroneMeleeStun)
+Behaviors=(BehaviorName=SelectBestTargetForDroneMeleeStun, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetsDroneMeleeStun)
+Behaviors=(BehaviorName=EvaluateTargetsDroneMeleeStun, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHighestSoldierRank, Child[2]=TargetScoreHealth, Child[3]=TargetScoreInvalidateCivilians, Child[4]=UpdateBestTarget)


+Behaviors=(BehaviorName=IsAbilityAvailable-LWDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LWDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LWDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LWDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-LWDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LWDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-LWDroneShock, NodeType=Action)

+Behaviors=(BehaviorName=IsAbilityAvailable-LWDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LWDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LWDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LWDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-LWDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LWDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-LWDroneMeleeStun, NodeType=Action)

+Behaviors=(BehaviorName=IsAbilityAvailable-LWDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LWDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LWDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LWDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-LWDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LWDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-LWDroneRepair, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------------- Chryssalid Behavior-(Currently rubbish)-----------------------------
; ----------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName="LWHiveQueen::CharacterRoot", NodeType=Selector, Child[0]=ChryssalidCocoonBranch, Child[1]=ChryssalidRoot)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------------- Great Archon-----------------------------
; ----------------------------------------------------------------------------------------------------------

+Behaviors=(BehaviorName=IsAbilityAvailable-StandalonePinionsStage1, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-StandalonePinionsStage1, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-StandalonePinionsStage1, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-StandalonePinionsStage1, NodeType=Action)

+Behaviors=(BehaviorName=TryStandalonePinions, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandalonePinionsStage1, Child[1]=FindPotentialAoETargets-StandalonePinionsBasicProfile, Child[2]=SelectAoETarget-StandalonePinionsBasicProfile, Child[3]=SelectAbility-StandalonePinionsStage1)

+Behaviors=(BehaviorName="LWGreatArchon::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=GreatArchonRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=GreatArchonRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=GreatArchonRedAbilitySelector)
+Behaviors=(BehaviorName=GreatArchonRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=GreatArchonRedFirstAction, Child[2]=GreatArchonRedLastAction)

+Behaviors=(BehaviorName=GreatArchonRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=GreatArchonFirstActionSelector)
+Behaviors=(BehaviorName=GreatArchonFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryFrenziedMoveAndAttack, \\
	Child[1]=TryMoveThenStandalonePinions, \\
	Child[2]=TryStandardMelee, \\
	Child[3]=DoIfFlankedMove, \\
	Child[4]=SelectMoveStandard, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=TryMoveThenStandalonePinions, NodeType=Selector, Child[0]=TryMoveForStandalonePinions, Child[1]=TryStandalonePinions)
+Behaviors=(BehaviorName=TryMoveForStandalonePinions, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-StandalonePinionsStage1, Child[2]=FindPotentialAoETargets-StandalonePinionsBasicProfile, Child[3]=MoveStandardIfFirstAbility-StandalonePinions)
+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-StandalonePinions, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindStandalonePinionsDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindStandalonePinionsDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-StandalonePinionsStage1, Child[2]=RestrictToEnemyLoS, Child[3]=FindRestrictedDestination-MWP_Fanatic)

+Behaviors=(BehaviorName=GreatArchonRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=GreatArchonRedLastActionSelector)
+Behaviors=(BehaviorName=GreatArchonRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryFrenziedAttack, \\
	Child[1]=TryStandalonePinions, \\
	Child[2]=TryStandardMelee, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemy, \\
	Child[5]=SelectMoveStandard)

+Behaviors=(BehaviorName=TryFrenziedAttack, NodeType=Sequence, Child[0]=AffectedByEffect-FrenzyEffect, Child[1]=TryStandardMelee)
+Behaviors=(BehaviorName=TryFrenziedMoveAndAttack, NodeType=Sequence, Child[0]=AffectedByEffect-FrenzyEffect, Child[1]=TryAttackOrDashAndAttack)
+Behaviors=(BehaviorName=TryAttackOrDashAndAttack, NodeType=Selector, Child[0]=TryStandardMelee, Child[1]=TryStandardMeleeDashFANATICUnsafe)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------------- MISC NEW BT NODES --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------

; MoveStandardWithLoSUnsafeIgnoreHazards: Equivalent to MoveStandardWithLoSUnsafe except will also ignore hazards
; in tiles.
+Behaviors=(BehaviorName="MoveStandardWithLoSUnsafeIgnoreHazards", NodeType="Sequence", Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestinationWithLoS-MWP_Standard, Child[4]=SelectAbility-StandardMove)

; MoveStandardUnsafeIgnoreHazards: Equivalent to MoveStandardUnsafe except will also ignore hazards
+Behaviors=(BehaviorName="MoveStandardUnsafeIgnoreHazards", NodeType="Sequence", Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestination-MWP_Standard, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName="MoveStandardUnsafeIgnoreHazards", NodeType="Sequence", Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestination-MWP_Standard, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveAdvanceToCoverUnsafeIgnoreHazards, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestination-MWP_AdvanceCover, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveAdvanceToCoverLoSUnsafeIgnoreHazards, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestinationWithLoS-MWP_AdvanceCover, Child[4]=SelectAbility-StandardMove)

; ConsiderTakingOverwatchLastAction - If we have only bad shots (<50%) and this is our last action point, try overwatching without any regard for the
; number of already overwatching allies.
+Behaviors=(BehaviorName="ConsiderTakingOverwatchLastAction", NodeType="Sequence", Child[0]=AllShotPercentagesBelow50, Child[1]=IsLastActionPoint, Child[2]=RandOverwatch50)

; AvoidDoubleMove - Conditions for which we should try to avoid double moving, and instead overwatch.
; Currently: If we can see any enemies, it's preferable to OW instead of taking a second move. This avoids enemies move/OWing instead of
; trying to catch up to XCOM when they're being outrun.
; Also aggressively overwatch with last action instead of double move if near evac
+Behaviors=(BehaviorName=AvoidDoubleMove, NodeType=Selector, Child[0]=AnyLivingEnemyVisible, Child[1]=EvacWithinVisRange)
; TryOverwatchLastAction - If this is the last action and we're in double-move avoidance mode, overwatch if it is available.
+Behaviors=(BehaviorName=TryOverwatchLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AvoidDoubleMove, Child[2]=TryOverwatch)
